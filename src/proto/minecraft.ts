/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: proto/minecraft.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class minecraftRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        channelID?: number;
        userID?: number;
        userinput?: string;
        message?: string;
        action?: string;
        username?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("channelID" in data && data.channelID != undefined) {
                this.channelID = data.channelID;
            }
            if ("userID" in data && data.userID != undefined) {
                this.userID = data.userID;
            }
            if ("userinput" in data && data.userinput != undefined) {
                this.userinput = data.userinput;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("action" in data && data.action != undefined) {
                this.action = data.action;
            }
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
        }
    }
    get channelID() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set channelID(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get userID() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set userID(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get userinput() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set userinput(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get action() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set action(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data: {
        channelID?: number;
        userID?: number;
        userinput?: string;
        message?: string;
        action?: string;
        username?: string;
    }): minecraftRequest {
        const message = new minecraftRequest({});
        if (data.channelID != null) {
            message.channelID = data.channelID;
        }
        if (data.userID != null) {
            message.userID = data.userID;
        }
        if (data.userinput != null) {
            message.userinput = data.userinput;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.action != null) {
            message.action = data.action;
        }
        if (data.username != null) {
            message.username = data.username;
        }
        return message;
    }
    toObject() {
        const data: {
            channelID?: number;
            userID?: number;
            userinput?: string;
            message?: string;
            action?: string;
            username?: string;
        } = {};
        if (this.channelID != null) {
            data.channelID = this.channelID;
        }
        if (this.userID != null) {
            data.userID = this.userID;
        }
        if (this.userinput != null) {
            data.userinput = this.userinput;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.action != null) {
            data.action = this.action;
        }
        if (this.username != null) {
            data.username = this.username;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.channelID != 0)
            writer.writeInt32(1, this.channelID);
        if (this.userID != 0)
            writer.writeInt32(2, this.userID);
        if (this.userinput.length)
            writer.writeString(3, this.userinput);
        if (this.message.length)
            writer.writeString(4, this.message);
        if (this.action.length)
            writer.writeString(5, this.action);
        if (this.username.length)
            writer.writeString(6, this.username);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): minecraftRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new minecraftRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.channelID = reader.readInt32();
                    break;
                case 2:
                    message.userID = reader.readInt32();
                    break;
                case 3:
                    message.userinput = reader.readString();
                    break;
                case 4:
                    message.message = reader.readString();
                    break;
                case 5:
                    message.action = reader.readString();
                    break;
                case 6:
                    message.username = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): minecraftRequest {
        return minecraftRequest.deserialize(bytes);
    }
}
export class minecraftResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        status?: number;
        statusMessage?: string;
        responseMessage?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("statusMessage" in data && data.statusMessage != undefined) {
                this.statusMessage = data.statusMessage;
            }
            if ("responseMessage" in data && data.responseMessage != undefined) {
                this.responseMessage = data.responseMessage;
            }
        }
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set status(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get statusMessage() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set statusMessage(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get responseMessage() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set responseMessage(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        status?: number;
        statusMessage?: string;
        responseMessage?: string;
    }): minecraftResponse {
        const message = new minecraftResponse({});
        if (data.status != null) {
            message.status = data.status;
        }
        if (data.statusMessage != null) {
            message.statusMessage = data.statusMessage;
        }
        if (data.responseMessage != null) {
            message.responseMessage = data.responseMessage;
        }
        return message;
    }
    toObject() {
        const data: {
            status?: number;
            statusMessage?: string;
            responseMessage?: string;
        } = {};
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.statusMessage != null) {
            data.statusMessage = this.statusMessage;
        }
        if (this.responseMessage != null) {
            data.responseMessage = this.responseMessage;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.status != 0)
            writer.writeUint32(1, this.status);
        if (this.statusMessage.length)
            writer.writeString(2, this.statusMessage);
        if (this.responseMessage.length)
            writer.writeString(3, this.responseMessage);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): minecraftResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new minecraftResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.status = reader.readUint32();
                    break;
                case 2:
                    message.statusMessage = reader.readString();
                    break;
                case 3:
                    message.responseMessage = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): minecraftResponse {
        return minecraftResponse.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedminecraftServiceService {
    static definition = {
        SendEvent: {
            path: "/minecraftService/SendEvent",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: minecraftRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => minecraftRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: minecraftResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => minecraftResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract SendEvent(call: grpc_1.ServerUnaryCall<minecraftRequest, minecraftResponse>, callback: grpc_1.sendUnaryData<minecraftResponse>): void;
}
export class minecraftServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedminecraftServiceService.definition, "minecraftService", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    SendEvent: GrpcUnaryServiceInterface<minecraftRequest, minecraftResponse> = (message: minecraftRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<minecraftResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<minecraftResponse>, callback?: grpc_1.requestCallback<minecraftResponse>): grpc_1.ClientUnaryCall => {
        return super.SendEvent(message, metadata, options, callback);
    };
}
